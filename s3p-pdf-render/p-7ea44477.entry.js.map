{"version":3,"names":["StringUtils","toTitleCase","string","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","s3pPrepaidReportCss","S3pPrepaidReport","this","log","debug","locale","async","driver","month","year","start","Date","setUTCHours","setUTCFullYear","stop","templateTs","Array","from","length","getUTCDate","_","i","periodTs","periods","period","ts","getDate","missingDays","filter","x","includes","missingDay","push","generateMissingDay","sort","a","b","parse","weeks","reduce","item","weekNumber","getWeek","week","monthSummary","generateMonthSummary","periodSummary","generatePeriodSummary","Object","entries","lastDayOfWeek","index","findIndex","splice","generateWeekSummary","Number","parseInt","componentDidLoad","div","document","createElement","id","body","appendChild","toLocaleString","_tsType","kms","absNR","absRem","available","availableDE","driving","end","expenses","bonus","evening","lunch","morning","night","total","unique","hdRem","matAM","service","serviceGlobal","working","weekSummary","toString","padStart","toISOString","getRowColor","render","h","Host","class","logo","src","_a","legalStructure","_b","siret","lastName","firstName","_c","toLocaleDateString","timeZone","_d","_e","socialExternalId","cellspacing","style","backgroundColor","weekday","day","minimumFractionDigits","maximumFractionDigits","_f","_g","_h","generatedAt","date","time","currentPage","totalPage"],"sources":["./src/utils/string.ts","./src/components/s3p-prepaid-report/s3p-prepaid-report.css?tag=s3p-prepaid-report","./src/components/s3p-prepaid-report/s3p-prepaid-report.tsx"],"sourcesContent":["export namespace StringUtils {\n  /**\n   * Converts all words with capitalize letter.\n   * @param {string} string String to titleize.\n   * @returns {string} String titleized.\n   */\n  export function toTitleCase(string: string): string {\n    return string\n      .toLowerCase()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n}\n",".prepaid-report {\n  font-family: Helvetica, sans-serif;\n  font-size: 15px;\n}\n\n.prepaid-report-header {\n  border: 2px solid black;\n  border-radius: 15px;\n  padding: 3px;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  margin-bottom: 8px;\n}\n\n.prepaid-report-footer {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  font-size: 11px;\n  margin-top: 10px;\n}\n\n.invisible-cell {\n  border: none !important;\n  background-color: white !important;\n}\n\n.prepaid-report-header-line {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n.prepaid-report-table {\n  font-family: Helvetica, sans-serif;\n  font-size: 11px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.prepaid-report-thead > th {\n  border: 1px solid black;\n  font-weight: normal;\n  border-collapse: collapse;\n}\n\n.prepaid-report-tbody td {\n  border: 1px solid black;\n  font-weight: normal;\n  text-align: right;\n  box-sizing: border-box;\n  border-collapse: collapse;\n}\n\n.prepaid-report-logo {\n  position: absolute;\n  height: 60px;\n  margin-left: auto;\n  left: 0;\n  margin-right: auto;\n  right: 0;\n}\n","import { Component, Host, Prop, h } from '@stencil/core';\nimport debug from 'debug';\nimport { StringUtils } from '../../utils/string';\nimport { getWeek } from '../../utils/utils';\nimport { DriversStruct, GeneratedAtStruct, PeriodsStruct } from './interfaces/prepaidReport.interface';\n\n@Component({\n  tag: 's3p-prepaid-report',\n  styleUrl: 's3p-prepaid-report.css',\n  shadow: false,\n})\nexport class S3pPrepaidReport {\n  private readonly log: debug.Debugger = debug('S3pPrepaidReport');\n\n  /** Current driver for the page. */\n  @Prop() driver: DriversStruct;\n  /** Month of the prepaid-report. */\n  @Prop() month: number;\n  /** Year of the prepaid-report. */\n  @Prop() year: number;\n  /** Information about generation date and time of the prepaid-report. */\n  @Prop() generatedAt: GeneratedAtStruct;\n  /** Page number of the current page. */\n  @Prop() currentPage: number;\n  /** Number of total pages. */\n  @Prop() totalPage: number;\n\n  private locale: string = 'fr-FR';\n  private start: Date;\n  private stop: Date;\n\n  /** Init of the prepaid report. */\n  async componentWillLoad() {\n    if (this.driver == null || this.month == null || this.year == null) {\n      this.log('You must set all props.');\n      return;\n    }\n\n    this.start = new Date();\n    this.start.setUTCHours(0, 0, 0, 0);\n    this.start.setUTCFullYear(this.year, this.month - 1, 1);\n\n    this.stop = new Date();\n    this.stop.setUTCHours(23, 59, 59, 999);\n    this.stop.setUTCFullYear(this.year, this.month, 0);\n\n    // Add missing days\n    const templateTs: number[] = Array.from({ length: this.stop.getUTCDate() }, (_, i) => i + 1);\n    const periodTs: number[] = this.driver.periods.map(period => new Date(period.ts).getDate());\n    const missingDays: number[] = templateTs.filter(x => !periodTs.includes(x));\n    for (const missingDay of missingDays) {\n      const ts = new Date();\n      ts.setUTCFullYear(this.year, this.month - 1, missingDay);\n      this.driver.periods.push(this.generateMissingDay(ts));\n    }\n    // Sort periods\n    this.driver.periods = this.driver.periods.sort((a, b) => Date.parse(a.ts) - Date.parse(b.ts));\n\n    // Groups by week number\n    const weeks = this.driver.periods.reduce((weeks, item) => {\n      const weekNumber: number = getWeek(new Date(item.ts));\n      const week = weeks[weekNumber] || [];\n      week.push(item);\n      weeks[weekNumber] = week;\n      return weeks;\n    }, {});\n\n    // Generate month and period summary\n    const monthSummary = this.generateMonthSummary();\n    const periodSummary = this.generatePeriodSummary();\n\n    // Add week summary\n    for (const [weekNumber, week] of Object.entries<PeriodsStruct[]>(weeks)) {\n      const lastDayOfWeek = week[week.length - 1];\n      const index = this.driver.periods.findIndex(period => period.ts === lastDayOfWeek.ts);\n      // Add the week summary after the end of the week\n      if (index > -1) {\n        this.driver.periods.splice(index + 1, 0, this.generateWeekSummary(Number.parseInt(weekNumber), week));\n      }\n    }\n\n    // Add month summary\n    this.driver.periods.push(monthSummary);\n    // Add period summary\n    this.driver.periods.push(periodSummary);\n  }\n\n  componentDidLoad() {\n    const div: HTMLDivElement = document.createElement<'div'>('div');\n    div.id = 'waiting';\n    document.body.appendChild(div);\n  }\n\n  /**\n   * Generate the month summary for the current driver.\n   * @returns {PeriodsStruct} A month summary in period.\n   */\n  private generateMonthSummary(): PeriodsStruct {\n    const month: Date = new Date(this.year, this.month - 1);\n\n    const monthSummary: PeriodsStruct = {\n      ts: StringUtils.toTitleCase(month.toLocaleString(this.locale, { month: 'long' })),\n      _tsType: 'string',\n      kms: 0,\n      absNR: null,\n      absRem: null,\n      available: null,\n      availableDE: null,\n      driving: null,\n      end: null,\n      expenses: {\n        bonus: null,\n        evening: null,\n        lunch: null,\n        morning: null,\n        night: null,\n        total: null,\n        unique: null,\n      },\n      hdRem: null,\n      matAM: null,\n      night: null,\n      service: null,\n      serviceGlobal: null,\n      start: null,\n      working: null,\n    };\n\n    // Make the sums of period on the week\n    for (const period of this.driver.periods) {\n      monthSummary.driving += period.driving;\n      monthSummary.working += period.working;\n      monthSummary.available += period.available;\n      // monthSummary.availableDE += period.availableDE;\n      monthSummary.service += period.service;\n      // monthSummary.hdRem += period.hdRem;\n      // monthSummary.absRem += period.absRem;\n      // monthSummary.absNR += period.absNR;\n      monthSummary.night += period.night;\n      monthSummary.kms += period.kms;\n      monthSummary.serviceGlobal += period.serviceGlobal;\n      monthSummary.expenses.bonus += period.expenses.bonus;\n      monthSummary.expenses.evening += period.expenses.evening;\n      monthSummary.expenses.lunch += period.expenses.lunch;\n      monthSummary.expenses.morning += period.expenses.morning;\n      monthSummary.expenses.night += period.expenses.night;\n      monthSummary.expenses.total += period.expenses.total;\n      monthSummary.expenses.unique += period.expenses.unique;\n    }\n\n    return monthSummary;\n  }\n\n  /**\n   * Generate the period summary for the current driver.\n   * @returns {PeriodsStruct} A period summary in period.\n   */\n  private generatePeriodSummary(): PeriodsStruct {\n    const periodSummary: PeriodsStruct = {\n      ts: 'PÃ©riode',\n      _tsType: 'string',\n      kms: 0,\n      absNR: null,\n      absRem: null,\n      available: null,\n      availableDE: null,\n      driving: null,\n      end: null,\n      expenses: {\n        bonus: null,\n        evening: null,\n        lunch: null,\n        morning: null,\n        night: null,\n        total: null,\n        unique: null,\n      },\n      hdRem: null,\n      matAM: null,\n      night: null,\n      service: null,\n      serviceGlobal: null,\n      start: null,\n      working: null,\n    };\n\n    // Make the sums of period on the week\n    for (const period of this.driver.periods) {\n      periodSummary.driving += period.driving;\n      periodSummary.working += period.working;\n      periodSummary.available += period.available;\n      // periodSummary.availableDE += period.availableDE;\n      periodSummary.service += period.service;\n      // periodSummary.hdRem += period.hdRem;\n      // periodSummary.absRem += period.absRem;\n      // periodSummary.absNR += period.absNR;\n      periodSummary.night += period.night;\n      periodSummary.kms += period.kms;\n      periodSummary.serviceGlobal += period.serviceGlobal;\n      periodSummary.expenses.bonus += period.expenses.bonus;\n      periodSummary.expenses.evening += period.expenses.evening;\n      periodSummary.expenses.lunch += period.expenses.lunch;\n      periodSummary.expenses.morning += period.expenses.morning;\n      periodSummary.expenses.night += period.expenses.night;\n      periodSummary.expenses.total += period.expenses.total;\n      periodSummary.expenses.unique += period.expenses.unique;\n    }\n\n    return periodSummary;\n  }\n\n  /**\n   * Generate a week summary on period format.\n   * @param {number} weekNumber Nth week of the year.\n   * @param {PeriodsStruct[]} periods Periods for the current week.\n   * @returns {PeriodsStruct} A week summary in period.\n   */\n  private generateWeekSummary(weekNumber: number, periods: PeriodsStruct[]): PeriodsStruct {\n    const weekSummary: PeriodsStruct = {\n      ts: `Semaine ${weekNumber.toString().padStart(2, '0')}`,\n      _tsType: 'string',\n      kms: 0,\n      absNR: null,\n      absRem: null,\n      available: null,\n      availableDE: null,\n      driving: null,\n      end: null,\n      expenses: {\n        bonus: null,\n        evening: null,\n        lunch: null,\n        morning: null,\n        night: null,\n        total: null,\n        unique: null,\n      },\n      hdRem: null,\n      matAM: null,\n      night: null,\n      service: null,\n      serviceGlobal: null,\n      start: null,\n      working: null,\n    };\n\n    // Make the sums of period on the week\n    for (const period of periods) {\n      weekSummary.driving += period.driving;\n      weekSummary.working += period.working;\n      weekSummary.available += period.available;\n      // weekSummary.availableDE += period.availableDE;\n      weekSummary.service += period.service;\n      // weekSummary.hdRem += period.hdRem;\n      // weekSummary.absRem += period.absRem;\n      // weekSummary.absNR += period.absNR;\n      weekSummary.night += period.night;\n      weekSummary.kms += period.kms;\n      weekSummary.serviceGlobal += period.serviceGlobal;\n      weekSummary.expenses.bonus += period.expenses.bonus;\n      weekSummary.expenses.evening += period.expenses.evening;\n      weekSummary.expenses.lunch += period.expenses.lunch;\n      weekSummary.expenses.morning += period.expenses.morning;\n      weekSummary.expenses.night += period.expenses.night;\n      weekSummary.expenses.total += period.expenses.total;\n      weekSummary.expenses.unique += period.expenses.unique;\n    }\n\n    return weekSummary;\n  }\n\n  /**\n   * Create a missing day with no values.\n   * @param {Date} ts Timestamp of the missing day.\n   * @returns {PeriodsStruct} A missing day in period.\n   */\n  private generateMissingDay(ts: Date): PeriodsStruct {\n    return {\n      ts: ts.toISOString().split('T')[0],\n      _tsType: 'date',\n      kms: 0,\n      absNR: null,\n      absRem: null,\n      available: null,\n      availableDE: null,\n      driving: null,\n      end: null,\n      expenses: {\n        bonus: null,\n        evening: null,\n        lunch: null,\n        morning: null,\n        night: null,\n        total: null,\n        unique: null,\n      },\n      hdRem: null,\n      matAM: null,\n      night: null,\n      service: null,\n      serviceGlobal: null,\n      start: null,\n      working: null,\n    };\n  }\n\n  /**\n   * Get the color of the row concording to its ts.\n   * @param {string} ts String for the ts.\n   * @returns {string} Color for the row.\n   */\n  private getRowColor(ts: string): string {\n    if (ts.includes('Semaine')) {\n      return '#e2e2fa';\n    } else if (ts.includes('PÃ©riode')) {\n      return '#9393fb';\n    } else {\n      return '#c5c5fb';\n    }\n  }\n\n  render() {\n    return (\n      <Host class=\"prepaid-report\">\n        <header class=\"prepaid-report-header\">\n          {this.driver.logo != null ? <img class=\"prepaid-report-logo\" src={this.driver.logo}></img> : null}\n          <div class=\"prepaid-report-header-line\">\n            <span>\n              SociÃ©tÃ© : {this.driver.legalStructure ?? 'N/A'} - {this.driver.siret ?? 'N/A'}\n            </span>\n            <span>\n              <b>SynthÃ¨se des disques et frais</b>\n            </span>\n          </div>\n          <div class=\"prepaid-report-header-line\">\n            <span>\n              Conducteur : {this.driver.lastName.toUpperCase()} {this.driver.firstName.toUpperCase()}\n            </span>\n            <span>\n              <b>\n                Du {this.start?.toLocaleDateString(this.locale, { timeZone: 'UTC' })} au {this.stop?.toLocaleDateString(this.locale, { timeZone: 'UTC' })}\n              </b>\n            </span>\n          </div>\n          <div class=\"prepaid-report-header-line\">\n            <span>Matricule : {this.driver.socialExternalId ?? 'N/A'}</span>\n          </div>\n        </header>\n\n        <main>\n          <table class=\"prepaid-report-table\" cellspacing=\"0\">\n            <thead class=\"prepaid-report-thead\">\n              <th class=\"invisible-cell\"></th>\n              <th>DÃ©but</th>\n              <th>Fin</th>\n              <th>Conduite</th>\n              <th>Travail</th>\n              <th>Dispo</th>\n              <th>Disp DE</th>\n              <th>Service</th>\n              <th>HD rem</th>\n              <th>Abs rem</th>\n              <th>Abs nr</th>\n              <th>Mat/AM</th>\n              <th>Nuit</th>\n              <th>Kms</th>\n              <th>Serv global</th>\n              <th class=\"invisible-cell\"></th>\n              <th>Pt. D</th>\n              <th>DÃ©j</th>\n              <th>DÃ®ner</th>\n              <th>Nuit</th>\n              <th>Divers</th>\n              <th>Total</th>\n              <th>Prime</th>\n            </thead>\n            <tbody class=\"prepaid-report-tbody\">\n              {this.driver.periods.map(period => {\n                const ts = new Date(period.ts);\n\n                // Do not display 0 values\n                if (period.available === 0) {\n                  period.available = null;\n                }\n\n                if (period.night === 0) {\n                  period.night = null;\n                }\n\n                // if (period.kms === 0) {\n                //   period.kms = null;\n                // }\n\n                if (period.expenses.morning === 0) {\n                  period.expenses.morning = null;\n                }\n\n                if (period.expenses.bonus === 0) {\n                  period.expenses.bonus = null;\n                }\n\n                if (period.expenses.evening === 0) {\n                  period.expenses.evening = null;\n                }\n\n                if (period.expenses.lunch === 0) {\n                  period.expenses.lunch = null;\n                }\n\n                if (period.expenses.night === 0) {\n                  period.expenses.night = null;\n                }\n\n                if (period.expenses.night === 0) {\n                  period.expenses.night = null;\n                }\n\n                if (period.expenses.unique === 0) {\n                  period.expenses.unique = null;\n                }\n\n                if (period.expenses.total === 0) {\n                  period.expenses.total = null;\n                }\n\n                return (\n                  <tr style={{ backgroundColor: period._tsType === 'string' ? this.getRowColor(period.ts) : 'none' }}>\n                    <td>\n                      {period._tsType === 'string'\n                        ? period.ts\n                        : ts.toLocaleDateString(this.locale, { timeZone: 'UTC', weekday: 'short', year: 'numeric', month: 'numeric', day: 'numeric' })}\n                    </td>\n                    <td>{period.start}</td>\n                    <td>{period.end}</td>\n                    <td>{period.driving?.toLocaleString(this.locale, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n                    <td>{period.working?.toLocaleString(this.locale, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n                    <td>{period.available?.toLocaleString(this.locale, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n                    <td>{period.availableDE}</td>\n                    <td>{period.service?.toLocaleString(this.locale, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n                    <td>{period.hdRem}</td>\n                    <td>{period.absRem}</td>\n                    <td>{period.absNR}</td>\n                    <td>{period.matAM}</td>\n                    <td>{period.night?.toLocaleString(this.locale, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n                    <td>{period.kms}</td>\n                    <td>{period.serviceGlobal?.toLocaleString(this.locale, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n                    <td class=\"invisible-cell\"></td>\n                    <td>{period.expenses.morning}</td>\n                    <td>{period.expenses.lunch}</td>\n                    <td>{period.expenses.evening}</td>\n                    <td>{period.expenses.night}</td>\n                    <td>{period.expenses.unique}</td>\n                    <td>{period.expenses.total?.toLocaleString(this.locale, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n                    <td>{period.expenses.bonus?.toLocaleString(this.locale, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </main>\n\n        <footer class=\"prepaid-report-footer\">\n          <span>\n            {/* <i>GÃ©nÃ©rÃ© le 19/04/2023 16:03:49</i> */}\n            <i>\n              GÃ©nÃ©rÃ© le {this.generatedAt.date} {this.generatedAt.time}\n            </i>\n          </span>\n          <span>\n            {/* <i>Page 1/2</i> */}\n            <i>\n              Page {(this.currentPage + 1).toString()}/{this.totalPage.toString()}\n            </i>\n          </span>\n        </footer>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}