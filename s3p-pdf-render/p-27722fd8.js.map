{"version":3,"names":["prettyDate","date","onlyDate","Date","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","getDurationObject","sec_num","Math","floor","seconds","toHHMMSS","duration","round","value","precision","multiplier","pow","getWeek","UTC","setUTCDate","getUTCDate","getUTCDay","yearStart","getUTCFullYear","weekNo","ceil","getTime"],"sources":["./src/utils/utils.ts"],"sourcesContent":["export function prettyDate(date, onlyDate = false) {\n  date = new Date(date);\n  const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();\n  const month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;\n  const year = date.getFullYear();\n  const hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();\n  const minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\n\n  return `${day}/${month}/${year}${!onlyDate ? ` ${hours}:${minutes}` : ''}`;\n}\n\nexport function getDurationObject(sec_num) {\n  let hours: any = Math.floor(sec_num / 3600);\n  let minutes: any = Math.floor((sec_num - hours * 3600) / 60);\n  let seconds: any = Math.floor(sec_num - hours * 3600 - minutes * 60);\n\n  if (hours < 10) {\n    hours = '0' + hours;\n  }\n  if (minutes < 10) {\n    minutes = '0' + minutes;\n  }\n  if (seconds < 10) {\n    seconds = '0' + seconds;\n  }\n  return { hours, minutes, seconds };\n}\n\nexport function toHHMMSS(sec_num) {\n  const duration = getDurationObject(sec_num);\n  const hours: any = duration.hours;\n  const minutes: any = duration.minutes;\n\n  return hours + 'h ' + minutes + 'm';\n}\n\nexport function round(value, precision) {\n  const multiplier = Math.pow(10, precision || 0);\n  return Math.round(value * multiplier) / multiplier;\n}\n\n/**\n * Return the week number from a date.\n * @param {Date} date Date to get the week number.\n * @returns {number} Week number.\n */\nexport function getWeek(date: Date): number {\n  // Copy date so don't modify original\n  date = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n  // Set to nearest Thursday: current date + 4 - current day number\n  // Make Sunday's day number 7\n  date.setUTCDate(date.getUTCDate() + 4 - (date.getUTCDay() || 7));\n  // Get first day of year\n  const yearStart = new Date(Date.UTC(date.getUTCFullYear(), 0, 1));\n  // Calculate full weeks to nearest Thursday\n  const weekNo = Math.ceil(((date.getTime() - yearStart.getTime()) / 86400000 + 1) / 7);\n  // Return week number\n  return weekNo;\n}\n"],"mappings":"SAAgBA,EAAWC,EAAMC,EAAW,OAC1CD,EAAO,IAAIE,KAAKF,GAChB,MAAMG,EAAMH,EAAKI,UAAY,GAAK,IAAMJ,EAAKI,UAAYJ,EAAKI,UAC9D,MAAMC,EAAQL,EAAKM,WAAa,EAAI,GAAK,KAAON,EAAKM,WAAa,GAAKN,EAAKM,WAAa,EACzF,MAAMC,EAAOP,EAAKQ,cAClB,MAAMC,EAAQT,EAAKU,WAAa,GAAK,IAAMV,EAAKU,WAAaV,EAAKU,WAClE,MAAMC,EAAUX,EAAKY,aAAe,GAAK,IAAMZ,EAAKY,aAAeZ,EAAKY,aAExE,MAAO,GAAGT,KAAOE,KAASE,KAAQN,EAAW,IAAIQ,KAASE,IAAY,IACxE,C,SAEgBE,EAAkBC,GAChC,IAAIL,EAAaM,KAAKC,MAAMF,EAAU,MACtC,IAAIH,EAAeI,KAAKC,OAAOF,EAAUL,EAAQ,MAAQ,IACzD,IAAIQ,EAAeF,KAAKC,MAAMF,EAAUL,EAAQ,KAAOE,EAAU,IAEjE,GAAIF,EAAQ,GAAI,CACdA,EAAQ,IAAMA,C,CAEhB,GAAIE,EAAU,GAAI,CAChBA,EAAU,IAAMA,C,CAElB,GAAIM,EAAU,GAAI,CAChBA,EAAU,IAAMA,C,CAElB,MAAO,CAAER,QAAOE,UAASM,UAC3B,C,SAEgBC,EAASJ,GACvB,MAAMK,EAAWN,EAAkBC,GACnC,MAAML,EAAaU,EAASV,MAC5B,MAAME,EAAeQ,EAASR,QAE9B,OAAOF,EAAQ,KAAOE,EAAU,GAClC,C,SAEgBS,EAAMC,EAAOC,GAC3B,MAAMC,EAAaR,KAAKS,IAAI,GAAIF,GAAa,GAC7C,OAAOP,KAAKK,MAAMC,EAAQE,GAAcA,CAC1C,C,SAOgBE,EAAQzB,GAEtBA,EAAO,IAAIE,KAAKA,KAAKwB,IAAI1B,EAAKQ,cAAeR,EAAKM,WAAYN,EAAKI,YAGnEJ,EAAK2B,WAAW3B,EAAK4B,aAAe,GAAK5B,EAAK6B,aAAe,IAE7D,MAAMC,EAAY,IAAI5B,KAAKA,KAAKwB,IAAI1B,EAAK+B,iBAAkB,EAAG,IAE9D,MAAMC,EAASjB,KAAKkB,OAAOjC,EAAKkC,UAAYJ,EAAUI,WAAa,MAAW,GAAK,GAEnF,OAAOF,CACT,Q"}